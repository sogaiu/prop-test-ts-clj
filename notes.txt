# XXX: exactly which commit of the grammar that the tests apply to
#      ought to be recorded and tracked.  preferably this could be
#      expressed programmatically as a dependency.  for the moment:
#
#        f8006afc91296b0cdb09bfa04e08a6b3347e5962

# XXX: periodically go through source looking for comments related
#      to unfinished or temporary bits

# XXX: write up details on what exactly is being tested and what things
#      are not being tested
#
#        order of nodes
#        existence of nodes
#        node string value
#        node type
#        lack of parse error (has_error)
#          try to visit all nodes to call has_error?
#        whether node was created by ts (i.e. is_missing)
#          try to visit all nodes to call is_missing?
#        markers
#        delimiters
#        distinguishing among nodes even with presence of "separators"
#          determine potential separator locations
#          include locations not between 2 items
#            before first form
#            after last form

# XXX: test execution has following issues:
#
#        non-simple separators complicate perception
#          nicer if start with simple and later use complex separators
#        hypothesis seems to emphasize empty collections (min_size 0)
#          possibly run tests once without min_size 0 and once with 1?
#        only easy to run all tests
#          leads to a lot of commenting / uncommenting
#          fixed order leads to manual reordering
#
#     started using a settings profile.  may be multiple could be
#     made to handle some / all of the above issues.

# XXX: if node.text gets merged in py-tree-sitter and it's usable,
#      consider moving over to that instead of using node_text.
#      n.b. that may require switching from strings to bytes --
#      i.e. use b'hello' instead of 'hello'

# grammatical pieces
#
# subatomic (1)
#   + auto_res_marker
#
# atomic (10)
#   + boolean
#   + character
#   + comment
#   + keyword
#   + nil
#   + number
#   + regex
#   + string
#   + symbol
#   + symbolic_value
#
# collection-like (8)
#   + anon_func
#   + list
#   + map
#   + namespaced_map
#   + read_cond
#   + read_cond_splicing
#   + set
#   + vector
#
# adorned form (7)
#   + deref_form
#   + eval_form
#   + quote_form
#   + syntax_quote_form
#   + unquote_form
#   + unquote_splicing_form
#   + var_quote_form
#
# other (2)
#   + discard_expr
#   + tagged_literal
#
# compound but not standalone (2)
#   + metadata
#   + old_metadata
